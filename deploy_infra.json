 {
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location" : {
            "defaultValue": "westeurope",
            "type": "String"
        },
        "masterAvailibilitySetName": {
            "defaultValue": "masterAvSet",
            "type": "String"
        },
        "masterVmNamePrefix": {
            "defaultValue": "swarmMaster",
            "type": "String"
        },
        "masterVmSize": {
            "defaultValue": "Standard_DS1_v2",
            "type": "String"
        },
        "sshPublicKey": {
            "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCrb8CdHVAlJKJeHtRoEdFsKlNoxemhzcjVmiV1aR0PB5UqPuxyWmrsNKudSdNXaQI+d7B179j1LZ1SbwLNVZS8xGhGA84TLY8FdBPrqd7QDpZGr+OGmcIaEs/7hgSUVlHOIv6krYCgIho+bgvXAhQbBu7GhinUWyvraeYOQxkB9A/LuTacq4je0sfsYBf18OwtNTcyIwGsDMg9vNg+ML3/OQoNOGUCMiHkfin65gJo8l/Ckjj9Of8oHWOzH3RYSGbkZ9qhVq6dAhyB0yIbRTz0p5nML8eBg/rKeB1s7tCi6eq86HFLvhzv5qjP3hnplk1cgpp1V7VEw8og8YefD3Rh",
            "type": "String"
        },
        "adminUserName": {
            "defaultValue": "dm",
            "type": "String"
        },
        "extLbName": {
            "defaultValue": "ExtLB",
            "type": "String"
        },
        "masterVmNicNamePrefix": {
            "defaultValue": "masterVmNic",
            "type": "String"
        },
        "ExtLbPublicIpName": {
            "defaultValue": "ExtPubIp",
            "type": "String"
        },
        "extLbHttpProbeUri": {
            "defaultValue": "/status",
            "type": "String"
        },        
        "vnetName": {
            "defaultValue": "[concat(resourceGroup().name, '-vnet')]",
            "type": "String"
        },
        "subnetName": {
            "defaultValue": "default",
            "type": "String"
        },
        "diagStorageAccountName": {
            "defaultValue": "bestestdiag385",
            "type": "String"
        },
        "diskStorageAccountName": {
            "defaultValue": "[concat(resourceGroup().name, 'disks')]",
            "type": "String"
        },
        "workerPoolSize": {
            "defaultValue": "3",
            "type": "String"
        },
        "workerPoolVmSize": {
            "defaultValue": "Standard_DS1_v2",
            "type": "String"
        },
        "workerPoolScaleSetName": {
            "defaultValue": "swarmPool",
            "type": "String"
        },
        "scaleSetStorageAccountPrefix": {
            "defaultValue": "scaleSetStorage",
            "type": "String"
        },
        "workerPoolScaleSetName": {
            "defaultValue": "swarmPool",
            "type": "String"
        },
        "mysqlVmSize": {
            "defaultValue": "Standard_DS1_v2",
            "type": "String"
        },
        "mysqlAvailibilitySetName": {
            "defaultValue": "mysqlAvSet",
            "type": "String"
        },
        "mysqlVmNamePrefix": {
            "defaultValue": "mysql",
            "type": "String"
        },
        "mysqlPassword": {
            "defaultValue": "notSecureP455w0rd",
            "type": "String"
        },        
        "mysqlVmNicNamePrefix": {
            "defaultValue": "mysqlVmNic",
            "type": "String"
        },
        "postgresVmSize": {
            "defaultValue": "Standard_DS1_v2",
            "type": "String"
        },
        "postgresAvailibilitySetName": {
            "defaultValue": "postgresAvSet",
            "type": "String"
        },
        "postgresVmNamePrefix": {
            "defaultValue": "postgres",
            "type": "String"
        },
        "postgresPassword": {
            "defaultValue": "kong",
            "type": "String"
        },        
        "postgresVmNicNamePrefix": {
            "defaultValue": "postgresVmNic",
            "type": "String"
        }
    },
    "variables": {
      "masterVmName0" : "[concat(parameters('masterVmNamePrefix'), '0')]",
      "masterVmName1" : "[concat(parameters('masterVmNamePrefix'), '1')]",
      "masterVmName2" : "[concat(parameters('masterVmNamePrefix'), '2')]",
      "masterVmNicName0": "[concat(parameters('masterVmNicNamePrefix'), '0')]",
      "masterVmNicName1": "[concat(parameters('masterVmNicNamePrefix'), '1')]",
      "masterVmNicName2": "[concat(parameters('masterVmNicNamePrefix'), '2')]",      
      "masterNetworkSecurityGroupName": "[concat(parameters('masterVmNamePrefix'), '-nsg')]",
      "extLbFrontEndPoolId": "[concat(resourceGroup().id, '/providers/Microsoft.Network/loadBalancers/', parameters('extLbName'), '/frontendIPConfigurations/LoadBalancerFrontEnd')]",
      "extLbHttpBackEndAddressPoolId": "[concat(resourceGroup().id, '/providers/Microsoft.Network/loadBalancers/', parameters('extLbName'), '/backendAddressPools/gatewayPool')]",
      "extLbHttpBackEndProbeId": "[concat(resourceGroup().id, '/providers/Microsoft.Network/loadBalancers/', parameters('extLbName'), '/probes/gatewayProbe')]",
      "scaleSetStorageAccount0": "[uniqueString(concat(resourceGroup().id, parameters('scaleSetStorageAccountPrefix'), '0'))]",
      "scaleSetStorageAccount1": "[uniqueString(concat(resourceGroup().id, parameters('scaleSetStorageAccountPrefix'), '1'))]",
      "scaleSetStorageAccount2": "[uniqueString(concat(resourceGroup().id, parameters('scaleSetStorageAccountPrefix'), '2'))]",
      "scaleSetStorageAccount3": "[uniqueString(concat(resourceGroup().id, parameters('scaleSetStorageAccountPrefix'), '3'))]",
      "scaleSetStorageAccount4": "[uniqueString(concat(resourceGroup().id, parameters('scaleSetStorageAccountPrefix'), '4'))]",
      "mysqlVmName0" : "[concat(parameters('mysqlVmNamePrefix'), '0')]",
      "mysqlNetworkSecurityGroupName": "[concat(parameters('mysqlVmNamePrefix'), '-nsg')]",
      "mysqlVmNicName0" : "[concat(parameters('mysqlVmNicNamePrefix'), '0')]",
      "postgresVmName0" : "[concat(parameters('postgresVmNamePrefix'), '0')]",
      "postgresNetworkSecurityGroupName": "[concat(parameters('postgresVmNamePrefix'), '-nsg')]",
      "postgresVmNicName0" : "[concat(parameters('postgresVmNicNamePrefix'), '0')]"
    },
    "resources": [
        {
            "comments": "VM set for High Availability, ensuring all VMs are distributed across 3 fault domains and 5 update domains",
            "type": "Microsoft.Compute/availabilitySets",
            "sku": {
                "name": "Classic"
            },
            "name": "[parameters('masterAvailibilitySetName')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[parameters('location')]",
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 3,
                /*"virtualMachines": [
                    {
                        "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName0'))]"
                    },
                    {
                        "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName1'))]"
                    },
                    {
                        "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName2'))]"
                    }
                ])*/
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "The zero master VM will init the docker swarm.",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('masterVmName0')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[parameters('location')]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('masterAvailibilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('masterVmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[variables('masterVmName0')]",
                        "createOption": "FromImage",
                        "vhd": {
                            "uri": "[concat('https', '://', parameters('diskStorageAccountName'), '.blob.core.windows.net', concat('/vhds/', variables('masterVmName0'),'-osDisk.vhd'))]"
                        },
                        "caching": "ReadWrite"
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "[variables('masterVmName0')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', parameters('adminUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('sshPublicKey')]"
                                }
                            ]
                        }
                    },
                    "secrets": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('masterVmNicName0'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', parameters('diagStorageAccountName'), '.blob.core.windows.net/')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('masterAvailibilitySetName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('diskStorageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('masterVmNicName0'))]"
            ]
        },
        {
            "comments": "Additional master vm.",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('masterVmName1')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[parameters('location')]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('masterAvailibilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('masterVmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[variables('masterVmName1')]",
                        "createOption": "FromImage",
                        "vhd": {
                            "uri": "[concat('https', '://', parameters('diskStorageAccountName'), '.blob.core.windows.net', concat('/vhds/', variables('masterVmName1'),'-osDisk.vhd'))]"
                        },
                        "caching": "ReadWrite"
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "[variables('masterVmName1')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', parameters('adminUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('sshPublicKey')]"
                                }
                            ]
                        }
                    },
                    "secrets": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('masterVmNicName1'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', parameters('diagStorageAccountName'), '.blob.core.windows.net/')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('masterAvailibilitySetName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('diskStorageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('masterVmNicName1'))]"
            ]
        },
        {
            "comments": "Additional master vm.",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('masterVmName2')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[parameters('location')]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('masterAvailibilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('masterVmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[variables('masterVmName2')]",
                        "createOption": "FromImage",
                        "vhd": {
                            "uri": "[concat('https', '://', parameters('diskStorageAccountName'), '.blob.core.windows.net', concat('/vhds/', variables('masterVmName2'),'-osDisk.vhd'))]"
                        },
                        "caching": "ReadWrite"
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "[variables('masterVmName2')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', parameters('adminUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('sshPublicKey')]"
                                }
                            ]
                        }
                    },
                    "secrets": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('masterVmNicName2'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', parameters('diagStorageAccountName'), '.blob.core.windows.net/')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('masterAvailibilitySetName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('diskStorageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('masterVmNicName2'))]"
            ]
        },
        {
            "comments": "Public facing loadbalancer, acting as single public entry point to env. SSH is natted to master pool, http is balanced to master pool.",
            "type": "Microsoft.Network/loadBalancers",
            "name": "[parameters('extLbName')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('ExtLbPublicIpName'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "gatewayPool"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "gatewayBalance",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('extLbFrontEndPoolId')]"
                            },
                            "frontendPort": 80,
                            "backendPort": 8080,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[variables('extLbHttpBackEndAddressPoolId')]"
                            },
                            "probe": {
                                "id": "[variables('extLbHttpBackEndProbeId')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "gatewayProbe",
                        "properties": {
                            "protocol": "Http",
                            "port": 8001,
                            "requestPath": "[parameters('extLbHttpProbeUri')]",
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "inboundNatRules": [
                    {
                        "name": "sshToMaster0",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('extLbFrontEndPoolId')]"
                            },
                            "frontendPort": 2200,
                            "backendPort": 22,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "sshToMaster1",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('extLbFrontEndPoolId')]"
                            },
                            "frontendPort": 2201,
                            "backendPort": 22,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "sshToMaster2",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('extLbFrontEndPoolId')]"
                            },
                            "frontendPort": 2202,
                            "backendPort": 22,
                            "protocol": "Tcp"
                        }
                    }
                ],
                "outboundNatRules": [],
                "inboundNatPools": []
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('ExtLbPublicIpName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('masterVmNicName0')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            //"privateIPAddress": "10.1.3.4",
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/default')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('extLbName')), '/backendAddressPools/gatewayPool')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('extLbName')), '/inboundNatRules/sshToMaster0')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterNetworkSecurityGroupName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', parameters('extLbName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterNetworkSecurityGroupName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('masterVmNicName1')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            //"privateIPAddress": "10.1.3.5",
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/default')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('extLbName')), '/backendAddressPools/gatewayPool')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('extLbName')), '/inboundNatRules/sshToMaster1')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterNetworkSecurityGroupName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', parameters('extLbName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterNetworkSecurityGroupName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('masterVmNicName2')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            //"privateIPAddress": "10.1.3.5",
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/default')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('extLbName')), '/backendAddressPools/gatewayPool')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('extLbName')), '/inboundNatRules/sshToMaster2')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterNetworkSecurityGroupName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/loadBalancers', parameters('extLbName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterNetworkSecurityGroupName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('masterVmName0'), '/masterInstallCustomScript')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/gr4per/azureswarm/master/master-install.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('./master-install.sh ', parameters('location'), ' ', variables('masterVmName0'), ' ', parameters('adminUserName'), ' init')]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName0'))]"
            ]
        },        
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('masterVmName1'), '/masterInstallCustomScript')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/gr4per/azureswarm/master/master-install.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('./master-install.sh ', parameters('location'), ' ', variables('masterVmName0'), ' ', parameters('adminUserName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName1'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('masterVmName0') ,'masterInstallCustomScript')]"
            ]
        },        
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('masterVmName2'), '/masterInstallCustomScript')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/gr4per/azureswarm/master/master-install.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('./master-install.sh ', parameters('location'), ' ', variables('masterVmName0'), ' ', parameters('adminUserName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName2'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('masterVmName0') ,'masterInstallCustomScript')]"
            ]
        },        
        {
            "comments": "net work security group applied to master nodes.",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('masterNetworkSecurityGroupName')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-ssh",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-kong-http",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1005,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-kong-https",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1007,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-kong-api",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8001",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1006,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-server-rpc",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8300",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1010,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-serf-lan",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8301",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1020,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-serf-wan",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8302",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1030,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-api",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8500",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1040,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-dns",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8600",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1050,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "dependsOn": []
        },
        {
            "comments": "Public IP for external loadbalancer and ssh nat access.",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('ExtLbPublicIpName')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
            },
            "dependsOn": []
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('vnetName')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "default",
                        "properties": {
                            "addressPrefix": "10.0.0.0/21"
                        }
                    }
                ]
            },
            "dependsOn": []
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Premium_LRS",
                "tier": "Premium"
            },
            "kind": "Storage",
            "name": "[parameters('diskStorageAccountName')]",
            "apiVersion": "2016-01-01",
            "location": "[parameters('location')]",
            "tags": {},
            "properties": {},
            "dependsOn": []
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Premium_LRS",
                "tier": "Premium"
            },
            "kind": "Storage",
            "name": "[variables('scaleSetStorageAccount0')]",
            "apiVersion": "2016-01-01",
            "location": "[parameters('location')]",
            "tags": {},
            "properties": {},
            "dependsOn": []
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Premium_LRS",
                "tier": "Premium"
            },
            "kind": "Storage",
            "name": "[variables('scaleSetStorageAccount1')]",
            "apiVersion": "2016-01-01",
            "location": "[parameters('location')]",
            "tags": {},
            "properties": {},
            "dependsOn": []
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Premium_LRS",
                "tier": "Premium"
            },
            "kind": "Storage",
            "name": "[variables('scaleSetStorageAccount2')]",
            "apiVersion": "2016-01-01",
            "location": "[parameters('location')]",
            "tags": {},
            "properties": {},
            "dependsOn": []
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Premium_LRS",
                "tier": "Premium"
            },
            "kind": "Storage",
            "name": "[variables('scaleSetStorageAccount3')]",
            "apiVersion": "2016-01-01",
            "location": "[parameters('location')]",
            "tags": {},
            "properties": {},
            "dependsOn": []
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Premium_LRS",
                "tier": "Premium"
            },
            "kind": "Storage",
            "name": "[variables('scaleSetStorageAccount4')]",
            "apiVersion": "2016-01-01",
            "location": "[parameters('location')]",
            "tags": {},
            "properties": {},
            "dependsOn": []
        },        
        {
            "comments": "VM scale set for swarm worker pool",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "sku": {
                "name": "[parameters('workerPoolVmSize')]",
                "tier": "Standard",
                "capacity": "[parameters('workerPoolSize')]"
            },
            "name": "[parameters('workerPoolScaleSetName')]",
            "apiVersion": "2015-06-15",
            "location": "[parameters('location')]",
            "properties": {
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "osProfile": {
                        "computerNamePrefix": "[concat(parameters('workerPoolScaleSetName'),'Worker')]",
                        "adminUsername": "[parameters('adminUserName')]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "[concat('/home/', parameters('adminUserName'), '/.ssh/authorized_keys')]",
                                        "keyData": "[parameters('sshPublicKey')]"                                    }
                                ]
                            }
                        },
                        "secrets": [],
                        //"adminPassword": "[parameters('virtualMachineScaleSets_besswarm_adminPassword')]"
                    },
                    "storageProfile": {
                        "osDisk": {
                            "vhdContainers": [
                                "[concat('https://', variables('scaleSetStorageAccount0'), '.blob.core.windows.net/', toLower(parameters('workerPoolScaleSetName')), 'vhd')]",
                                "[concat('https://', variables('scaleSetStorageAccount1'), '.blob.core.windows.net/', toLower(parameters('workerPoolScaleSetName')), 'vhd')]",
                                "[concat('https://', variables('scaleSetStorageAccount2'), '.blob.core.windows.net/', toLower(parameters('workerPoolScaleSetName')), 'vhd')]",
                                "[concat('https://', variables('scaleSetStorageAccount3'), '.blob.core.windows.net/', toLower(parameters('workerPoolScaleSetName')), 'vhd')]",
                                "[concat('https://', variables('scaleSetStorageAccount4'), '.blob.core.windows.net/', toLower(parameters('workerPoolScaleSetName')), 'vhd')]"
                            ],
                            "name": "[concat(parameters('workerPoolScaleSetName'),'-osDisk')]",
                            "createOption": "FromImage",
                            "caching": "ReadOnly"
                        },
                        "imageReference": {
                            "publisher": "Canonical",
                            "offer": "UbuntuServer",
                            "sku": "16.04.0-LTS",
                            "version": "latest"
                        }
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[concat(parameters('workerPoolScaleSetName'),'-nic')]",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "[concat(parameters('workerPoolScaleSetName'),'-ipconfig')]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), concat('/subnets/', parameters('subnetName')))]"
                                                },
                                                /*"loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancers_besswarmflb_name')), concat('/backendAddressPools/', parameters('scaleSetName'),'fbepool'))]"
                                                    }
                                                ],
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancers_besswarmflb_name')), concat('/inboundNatPools/', parameters('scaleSetName'),'fnatpool'))]"
                                                    }
                                                ]*/
                                            }
                                        }
                                    ],
                                    /*"networkSecurityGroup": {
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('swarmWorkerNetworkSecurityGroupName'))]"
                                    }*/
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                      "extensions": [
                        {
                          "name" : "swarmJoinCustomScript",
                          "properties": {
                              "publisher": "Microsoft.Azure.Extensions",
                              "type": "CustomScript",
                              "typeHandlerVersion": "2.0",
                              "autoUpgradeMinorVersion": true,
                              "settings": {
                                  "fileUris": [
                                      "https://raw.githubusercontent.com/gr4per/azureswarm/master/worker-install.sh"
                                  ]
                              },
                              "protectedSettings": {
                                  "commandToExecute": "[concat('./worker-install.sh ', parameters('location'), ' ', variables('masterVmName0'), ' ', parameters('adminUserName'))]"
                              }
                          }
                        }
                      ]
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scaleSetStorageAccount0'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scaleSetStorageAccount1'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scaleSetStorageAccount2'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scaleSetStorageAccount3'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('scaleSetStorageAccount4'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('masterVmName0') ,'masterInstallCustomScript')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('masterVmName1') ,'masterInstallCustomScript')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('masterVmName2') ,'masterInstallCustomScript')]"
                //"[resourceId('Microsoft.Network/networkSecurityGroups', parameters('swarmWorkerNetworkSecurityGroupName'))]"
                //"[resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancers_besswarmflb_name'))]"
            ]
        },
        {
            "comments": "VM set for High Availability, ensuring all VMs are distributed across 3 fault domains and 5 update domains",
            "type": "Microsoft.Compute/availabilitySets",
            "sku": {
                "name": "Classic"
            },
            "name": "[parameters('mysqlAvailibilitySetName')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[parameters('location')]",
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 3,
                /*"virtualMachines": [
                    {
                        "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName0'))]"
                    },
                    {
                        "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName1'))]"
                    },
                    {
                        "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('masterVmName2'))]"
                    }
                ])*/
            },
            "dependsOn": [
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mysqlVmNicName0')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            //"privateIPAddress": "10.1.3.4",
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/default')]"
                            },
                            /*"loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('extLbName')), '/backendAddressPools/gatewayPool')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('extLbName')), '/inboundNatRules/sshToMaster0')]"
                                }
                            ]*/
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mysqlNetworkSecurityGroupName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mysqlNetworkSecurityGroupName'))]"
            ]
        },
        {
            "comments": "net work security group applied to mysql nodes.",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mysqlNetworkSecurityGroupName')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-ssh",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-mysql",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3306",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1005,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "dependsOn": []
        },
        {
            "comments": "The mysqlServer0 is the cluster master.",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('mysqlVmName0')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[parameters('location')]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('mysqlAvailibilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('mysqlVmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[variables('mysqlVmName0')]",
                        "createOption": "FromImage",
                        "vhd": {
                            "uri": "[concat('https', '://', parameters('diskStorageAccountName'), '.blob.core.windows.net', concat('/vhds/', variables('mysqlVmName0'),'-osDisk.vhd'))]"
                        },
                        "caching": "ReadWrite"
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "[variables('mysqlVmName0')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', parameters('adminUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('sshPublicKey')]"
                                }
                            ]
                        }
                    },
                    "secrets": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mysqlVmNicName0'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', parameters('diagStorageAccountName'), '.blob.core.windows.net/')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('mysqlAvailibilitySetName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('diskStorageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('mysqlVmNicName0'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mysqlVmName0'), '/mysqlInstallCustomScript')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/gr4per/azureswarm/master/mysql-install.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('./mysql-install.sh ', parameters('location'), ' ', variables('masterVmName0'), ' ', parameters('mysqlPassword'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('mysqlVmName0'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('masterVmName0') ,'masterInstallCustomScript')]"
            ]
        },
        {
            "comments": "VM set for High Availability, ensuring all VMs are distributed across 3 fault domains and 5 update domains",
            "type": "Microsoft.Compute/availabilitySets",
            "sku": {
                "name": "Classic"
            },
            "name": "[parameters('postgresAvailibilitySetName')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[parameters('location')]",
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 3
            },
            "dependsOn": [
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('postgresVmNicName0')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/default')]"
                            }
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('postgresNetworkSecurityGroupName'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('postgresNetworkSecurityGroupName'))]"
            ]
        },
        {
            "comments": "net work security group applied to postgres nodes.",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('postgresNetworkSecurityGroupName')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-ssh",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-postgres",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "5432",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1005,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "dependsOn": []
        },
        {
            "comments": "The postgresServer0 is the cluster master.",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('postgresVmName0')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[parameters('location')]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('postgresAvailibilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('postgresVmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "name": "[variables('postgresVmName0')]",
                        "createOption": "FromImage",
                        "vhd": {
                            "uri": "[concat('https', '://', parameters('diskStorageAccountName'), '.blob.core.windows.net', concat('/vhds/', variables('postgresVmName0'),'-osDisk.vhd'))]"
                        },
                        "caching": "ReadWrite"
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "[variables('postgresVmName0')]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', parameters('adminUserName'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('sshPublicKey')]"
                                }
                            ]
                        }
                    },
                    "secrets": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('postgresVmNicName0'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', parameters('diagStorageAccountName'), '.blob.core.windows.net/')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('postgresAvailibilitySetName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('diskStorageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('postgresVmNicName0'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('postgresVmName0'), '/postgresInstallCustomScript')]",
            "apiVersion": "2016-03-30",
            "location": "[parameters('location')]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/gr4per/azureswarm/master/postgres-install.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('./postgres-install.sh ', parameters('location'), ' ', variables('masterVmName0'), ' ', parameters('postgresPassword'))]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('postgresVmName0'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('masterVmName0') ,'masterInstallCustomScript')]"
            ]
        }       
        
    ]
}